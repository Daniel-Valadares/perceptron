# -*- coding: utf-8 -*-
"""Perceptron.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VwjMKbMqbxWE_zwNaVqpIOUs2Z4qX3E0
"""

from sklearn.linear_model import Perceptron
import itertools

"""Geração de entradas"""

# Função para gerar todas as possíveis combinações de entradas booleanas
def generate_inputs(num_inputs):
    inputs = list(itertools.product([0, 1], repeat=num_inputs))
    return inputs

# Número de entradas para as funções AND, OR e XOR
num_inputs = 3

# Gerar inputs com n entradas
inputs = generate_inputs(num_inputs)
inputs

"""**AND**

Geração de saída para AND
"""

def generate_labels_and(num_inputs):
    labels = [0] * 2**num_inputs
    for i in range(2**num_inputs):
        if all(x == 1 for x in generate_inputs(num_inputs)[i]):
            labels[i] = 1
    return labels

labels_and = generate_labels_and(num_inputs)
labels_and

"""Testando o Perceptron com AND"""

# Treinando o Perceptron para a função AND com n entradas
perceptron_and = Perceptron(eta0=0.1, max_iter=1000)
perceptron_and.fit(inputs, labels_and)

# Testando o Perceptron treinado na função AND
input_and = [1, 1, 1]
output_and = perceptron_and.predict([input_and])
print("Saída:", output_and)

accuracy_and = perceptron_and.score(inputs, labels_and)
print("Acurácia:", accuracy_and)

"""**OR**

Geração de saída para OR
"""

def generate_labels_or(num_inputs):
    labels = [0] * 2**num_inputs
    for i in range(2**num_inputs):
        if any(x == 1 for x in generate_inputs(num_inputs)[i]):
            labels[i] = 1
    return labels

labels_or = generate_labels_or(num_inputs)
labels_or

"""Testando o Perceptron com OR"""

# Treinando o Perceptron para a função OR com n entradas
perceptron_or = Perceptron(eta0=0.1, max_iter=1000)
perceptron_or.fit(inputs, labels_or)

# Testando o Perceptron treinado na função OR
input_or = [0, 1, 0]
output_or = perceptron_or.predict([input_or])
print("Saída:", output_or)

accuracy_or = perceptron_or.score(inputs, labels_or)
print("Acurácia:", accuracy_or)

"""**XOR**

Geração de saída para XOR
"""

def generate_labels_xor(num_inputs):
    labels = [0] * 2**num_inputs
    for i in range(2**num_inputs):
        if sum(generate_inputs(num_inputs)[i]) % 2 == 1:
            labels[i] = 1
    return labels

labels_xor = generate_labels_xor(num_inputs)
labels_xor

# Treinando o Perceptron para a função XOR com n entradas
perceptron_xor = Perceptron(eta0=0.1, max_iter=1000)
perceptron_xor.fit(inputs, labels_xor)

# Testando o Perceptron treinado na função XOR
input_xor = [1, 0, 1]
output_xor = perceptron_xor.predict([input_xor])
print("Saída:", output_xor)

accuracy_xor = perceptron_xor.score(inputs, labels_xor)
print("Acurácia:", accuracy_xor)